package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Item item

swagger:model item
*/
type Item struct {

	/* description

	Max Length: 2048
	Min Length: 1
	*/
	Description string `json:"description,omitempty"`

	/* id

	Read Only: true
	*/
	ID int64 `json:"id,omitempty"`

	/* name of the thing in the lab reserved

	Required: true
	Max Length: 512
	Min Length: 1
	*/
	Name *string `json:"name"`

	/* reserved by
	 */
	ReservedBy *Owner `json:"reservedBy,omitempty"`

	/* date/time this reservation will expire
	 */
	ReservedUntil strfmt.DateTime `json:"reservedUntil,omitempty"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReservedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(m.Description), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 2048); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 512); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateReservedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReservedBy) { // not required
		return nil
	}

	if m.ReservedBy != nil {

		if err := m.ReservedBy.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
