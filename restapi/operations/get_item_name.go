package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetItemNameHandlerFunc turns a function with the right signature into a get item name handler
type GetItemNameHandlerFunc func(GetItemNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetItemNameHandlerFunc) Handle(params GetItemNameParams) middleware.Responder {
	return fn(params)
}

// GetItemNameHandler interface for that can handle valid get item name params
type GetItemNameHandler interface {
	Handle(GetItemNameParams) middleware.Responder
}

// NewGetItemName creates a new http.Handler for the get item name operation
func NewGetItemName(ctx *middleware.Context, handler GetItemNameHandler) *GetItemName {
	return &GetItemName{Context: ctx, Handler: handler}
}

/*GetItemName swagger:route GET /item/{name} getItemName

GetItemName get item name API

*/
type GetItemName struct {
	Context *middleware.Context
	Handler GetItemNameHandler
}

func (o *GetItemName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetItemNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
